plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.13'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.haerolog'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}

ext {
    snippetsDir = file('build/generated-snippets') // Configure a snippetsDir property that defines the output location for generated snippets.
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // querydsl https://honeymon.io/tech/2020/07/09/gradle-annotation-processor-with-querydsl.html
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-jpa"

    annotationProcessor("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa") // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor("jakarta.persistence:jakarta.persistence-api") // java.lang.NoClassDefFoundError(javax.annotation.Entity) 발생 대응
    annotationProcessor("jakarta.annotation:jakarta.annotation-api") // java.lang.NoClassDefFoundError (javax.annotation.Generated) 발생 대응

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // h2
    runtimeOnly 'com.h2database:h2'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // p6spy
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1"

    // REST Docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

/** clean 태스크 실행시 QClass 삭제 */
clean {
    delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
    delete file('out')
}

test {
    useJUnitPlatform()
    outputs.dir snippetsDir // Make Gradle aware that running the test task will write output to the snippetsDir. This is required for incremental builds.
}

asciidoctor { // Configure the asciidoctor task.
    inputs.dir snippetsDir // Make Gradle aware that running the task will read input from the snippetsDir. This is required for incremental builds.
    configurations 'asciidoctorExt' // Configure the use of the asciidoctorExt configuration for extensions.
    dependsOn test // Make the task depend on the test task so that the tests are run before the documentation is created.
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") { // 생성된 문서를 jar static/docs디렉터리에 복사
        into 'static/docs'
    }
}
